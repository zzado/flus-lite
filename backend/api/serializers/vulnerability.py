from os import read
from rest_framework import serializers
from flus_lite import settings
from api.models import *
from api.serializers.poc import POCSerializer

class VulItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = VulnerabilityItem
        fields = ['full_code', 'code', 'name', 'risk', 'checking_guide', 'judgment_guide', 'description']

class AssetSerializerForVul(serializers.ModelSerializer):
    class Meta:
        model = Asset
        fields = ['pk', 'code']


class VulnerabilitySerializer(serializers.ModelSerializer):
    vulnerability_item = VulItemSerializer(read_only=True)
    pocs = POCSerializer(many=True)
    asset = AssetSerializerForVul(read_only=True)

    class Meta:
        model = Vulnerability
        fields = '__all__'

    def setup_preloading(queryset):
        #print(queryset)
        return queryset.select_related('vulnerability_item', 'asset').prefetch_related('pocs')
    
    def update(self, instance, validated_data):
        pocsData = validated_data.pop('pocs')
        
        pocObjs = POC.objects.filter(vulnerability=instance)
        newObjs = []
        updatedObjs = []
        for pocData in pocsData :
            pocId = pocData.get('id', 0)
            if(pocId != 0):
                try :
                    pocObj = POC.objects.get(id=pocId)
                except POC.DoesNotExist:
                    raise serializers.ValidationError(f'invalid poc id')
                
                for _ in pocData : 
                    pocObj.__dict__[_] = pocData[_]
                updatedObjs.append(pocObj)
            else:
                pocData.pop('id')
                newObjs.append(POC(**pocData))

        for _ in updatedObjs :
            _.save()
            
        for _ in pocObjs :
            if _.id not in [ x.id for x in updatedObjs ] :
                _.delete()

        for _ in newObjs :
            _.save()

        for _ in validated_data : 
            instance.__dict__[_] = validated_data[_]

        instance.save()
        return instance
