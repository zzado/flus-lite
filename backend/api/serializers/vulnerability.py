from rest_framework import serializers
from flus_lite import settings
from api.models import *
from api.serializers.poc import POCSerializer


class VulItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = VulnerabilityItem
        fields = ['full_code', 'code', 'name', 'risk']


class VulnerabilitySerializer(serializers.ModelSerializer):
    vulnerability_item = VulItemSerializer(read_only=True)
    pocs = POCSerializer(many=True)
    class Meta:
        model = Vulnerability
        fields = '__all__'
    
    def update(self, instance, validated_data):
        pocsData = validated_data.pop('pocs')

        
        pocObjs = POC.objects.filter(vulnerability=instance)

        for pocData in pocsData :
            pocId = pocData.get('id', 0)
            if(pocId != 0):
                try :
                    pocObj = POC.objects.get(id=pocId)
                except POC.DoesNotExist:
                    raise serializers.ValidationError(f'invalid poc id')
                
                for _ in pocData : 
                    pocObj.__dict__[_] = pocData[_]
                
                pocObj.save()
            else:
                POC.objects.create(**pocData)
        
        for _ in validated_data : 
            instance.__dict__[_] = validated_data[_]

        instance.save()
        return instance
