from flus_lite import settings
from rest_framework import generics, mixins, status, response
from api.serializers import *
from rest_framework.permissions import IsAuthenticated
from api.models import *

class VulnerabilityListCreateAPI(mixins.ListModelMixin, mixins.CreateModelMixin,generics.GenericAPIView):
    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        return self.list(request)
    
    def post(self, request, *args, **kwargs):
        return self.create(request)

class VulnerabilityDetailUpdateDeleteAPI(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView):
    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        return self.retrieve(request, *args, **kwargs)

    def put(self, request, *args, **kwargs):        
        return self.update(request, *args, **kwargs)
        
    def delete(self, request, *args, **kwargs):
        return self.destroy(request, *args, **kwargs)

class VulnerabilityListByAssetAPI(mixins.ListModelMixin, generics.GenericAPIView):
    serializer_class = VulnerabilitySerializer
    queryset = None
    #permission_classes = [IsAuthenticated]
    
    def get(self, request, *args, **kwargs):
        try:
            assetObj = Asset.objects.get(pk=kwargs['assetId'])
        except Asset.DoesNotExist:
            return response.Response(settings.COMMON_ERROR_MESSAGE, status=status.HTTP_400_BAD_REQUEST)
            
            
        self.queryset = Vulnerability.objects.filter(asset=assetObj)
        return self.list(request)