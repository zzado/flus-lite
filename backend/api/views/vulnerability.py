from flus_lite import settings
from rest_framework import generics, mixins, status, response, viewsets
from api.serializers import *
from rest_framework.permissions import IsAuthenticated
from api.models import *


class VulnerabilityAPI(mixins.ListModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, viewsets.GenericViewSet):
    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer
    #permission_classes = [IsAuthenticated]

    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)
    
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)

class VulnerabilityListByAssetAPI(mixins.ListModelMixin, generics.GenericAPIView):
    serializer_class = VulnerabilitySerializer
    queryset = None
    #permission_classes = [IsAuthenticated]
    
    def get(self, request, *args, **kwargs):
        try:
            assetObj = Asset.objects.get(pk=kwargs['assetId'])
        except Asset.DoesNotExist:
            return response.Response(settings.COMMON_ERROR_MESSAGE, status=status.HTTP_400_BAD_REQUEST)
            
            
        self.queryset = Vulnerability.objects.filter(asset=assetObj)
        return self.list(request)

class VulnerabilityListByAreaAPI(mixins.ListModelMixin, generics.GenericAPIView):
    serializer_class = VulnerabilitySerializer
    queryset = None
    #permission_classes = [IsAuthenticated]
    
    def get(self, request, *args, **kwargs):
        try:
            projectObj = Project.objects.get(pk=kwargs['projectId'])
        except Project.DoesNotExist:
            return response.Response(settings.COMMON_ERROR_MESSAGE, status=status.HTTP_400_BAD_REQUEST)
        
        if projectObj.get_compliance_area_obj(kwargs['areaAlias']) == None :
            return response.Response(settings.COMMON_ERROR_MESSAGE, status=status.HTTP_400_BAD_REQUEST)

        self.queryset = Vulnerability.objects.filter(project=projectObj, asset__area_alias=kwargs['areaAlias'])
        return self.list(request)